import type { Readable } from './readable';
import type { Stores } from './Stores';
import type { ExtractStoresValues } from './ExtractStoresValues';
import type { Unsubscriber } from './Unsubscriber';
import type { StoresValues } from './StoresValues';
export declare function derived<Store extends Stores, Val extends unknown = unknown>(stores: Store, in_fn: derived_in_fn_type<Store, Val>, initial_value?: Val): Readable<Val>;
export declare type derived_in_fn_type<Store extends Stores, Val extends unknown = unknown> = (values: ExtractStoresValues<Store>, set: (value: Val) => void) => Val | Unsubscriber | void;
export declare type derived_out_fn_type<Store extends Stores, Val extends unknown = unknown> = (values: ExtractStoresValues<Store>, set?: (value: Val) => void) => Val | Unsubscriber | void;
export declare type derived_return_in_fn_type<Store extends Stores, Val extends unknown = unknown> = (values: ExtractStoresValues<Store>) => Val;
export declare type derived_set_in_fn_type<Store extends Stores, Val extends unknown = unknown> = (values: ExtractStoresValues<Store>, set: (value: Val) => void) => Unsubscriber | void;
export declare type return_derived_type<Store extends Stores, Val extends unknown = unknown> = (stores: Store, fn: (values: StoresValues<Store>) => Val) => Readable<Val>;
export declare type set_derived_type<Store extends Stores, Val extends unknown = unknown> = (stores: Store, fn: (values: StoresValues<Store>, set: (value: Val) => void) => Unsubscriber | void, initial_value?: Val) => Readable<Val>;
